golang接口

接口像是一个公司的领导，他会定义一些通用的规范，只是设计规范，而不实现规范。
go语言的接口，是一种新的类型定义，他把所有的具有公共性的方法定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口。
语法格式和方法非常类似。

接口的语法格式
/**定义接口**/
type interface_name interface{
    method_name1 [return_type]
    method_name2 [return_type]
    method_name3 [return_type]
    ...
    method_namen [return_type]
}
/** 定义结构体 */
type struct_name struct{
    /* variables */
}

/* 实现接口方法 */
func (struct_name_variables struct_name) method_name() [return_type] {
    /* 方法实现 */
}

golang接口和类型的关系
1.一个类型可以实现多个接口
2.多个类型可以实现一个接口

一个类型实现多个接口，例如：有一个player接口在播放音乐，有一个video接口在播放视频，一个手机mobile实现这两个接口，既可以播放音乐又可以播放视频
定义一个player接口
type player interface{
    playMusic()
}

定义一个video接口
type video interface{
    playVidel()
}

定义mobile结构体实现两个接口
type mobile struct{
}

func (mo mobile) playMusic() {
	fmt.Println("playMusic....")
}
func (mo mobile) playVideo() {
	fmt.Println("playVideo...")
}

func main() {
	nokia := mobile{}
	nokia.playVideo()
	nokia.playMusic()
}


golang接口嵌套
接口可以通过嵌套，创建新的接口。例如：飞鱼，既可以飞，又可以游泳。我们创建一个fly接口，创建一个游泳接口swim，飞鱼接口有这两个接口组成

飞flyer接口
type Flyer interface{
    fly()
}

创建swimmer接口
type Swimmer interface{
    swim()
}

组合一个接口flyfish
type FlyFish interface{
    Flyer
    Swimmer
}

创建一个结构体Fish
type Fish struct{

}

实现这个组合接口
func (fish Fish) fly(){
    fmt.println("fly...")
}

func (fish Fish) swim(){
    fmt.println("swim...")
}

测试
func main(){
    var ff FlyFish
    ff = Fish{}
    ff.fly()
    ff.swim()
}

golang通过接口实现OCP设计原则(对扩展是开放的，对修改是关闭的)
ocp是面向对象可复用设计的一块基石，便是所谓的开、闭原则(Open Closed Principle，常缩写为OCP)。虽然go不是面向对象语言，但是也可以模拟这个原则

golang模拟oop的属性和方法
golang没有面向对象的概念，也没有封装的概念，但是可以通过结构体struct和函数绑定来实现OOP的属性和方法等特性，接受者receiver方法。
golang本质上没有oop的概念，也没有继承的概念，但是可以通过结构体嵌套来实现这个特性