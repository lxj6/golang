golang指针
go语言中的函数传参都是值拷贝，当我们想要修改某个变量的时候，我们可以创建一个指向该变量地址的指针变量，传递数据使用指针，而无需拷贝数据。
类型指针不能进行偏移和运算
go语言中的指针操作非常简单，只需要记住两个符号&（取地址）和*（根据地址取值）

指针地址和指针类型
每个变量在运行时都有一个地址，这个地址代表变量在内存中的位置，go语言中使用&符号放在变量前面对变量进行取地址操作，go语言中值类型(int、float、bool、string、array、struct)都有指针类型，如：int、int64、string等。

指针语法
一个指针变量指向了一个值的内存地址。（也就是说我们声明了一个指针之后，可以向变量赋值一样，把一个值的内存地址放入指针当中。）
类似于变量和常量，在使用指针前你需要先声明指针，指针声明格式如下：
var var_name *var_type
var_type 指针类型
var_name 指针变量名
* 用于指定变量作为一个指针

golang指向数组的指针
定义语法
var ptr [MAX]*int 标示数组里面元素的类型是指针的类型

golang结构体指针
结构体指针和普通指针的变量指针相同