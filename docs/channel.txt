channel
Go提供了一种称之为通道机制，用于在goroutine之间共享数据，当您作为goroutine执行并发活动时，需要在goroutine之间共享资源数据，通道充当goroutine之间的管道，并提供一种机制来保证同步交换

需要在声明通道时指定数据类型，我们可以共享内置、命名、结构和引用类型的值和指针，数据在通道上传递，在任何给定时间只有一个goroutine可以访问数据项，因此按照设计不会发生数据竞争

根据数据交换的行为，有两种类型的通道，无缓冲通道和缓冲通道。无缓冲通道用于执行goroutine之间的同步通信，而缓冲通道用于执行异步通信。无缓冲通道保证正在发送和接受发生的瞬间执行两个goroutice之间的交换，缓冲通道没有这样的保证。

创建无缓冲通道和缓冲通道的语法

unbuffered := make(chan int) // 无缓冲通道
buffered := make(chan int, 10) // 缓冲通道

这是将值发送到通道的代码块需要使用 <- 运算符：

goroutine := make(chan string,5) // 字符串缓冲通道
goroutine <- "hello" // 通过通道发送字符串

这是从通道接收值的代码块：
data :=  <- goroutine // 从通道获取字符串
<- 运算符附加到通道变量的左侧，以接收来自通道的值

无缓冲通道：
在无缓冲通道中，在接收到任何值之前没有能力保存它。在这种类型的通道中,发送和结构goroutine在任何发送或接收操作完成之前的同一时刻都准备就绪。如果两个goroutine没有在同一时刻准备好，则通道会让执行其各自发送或接收操作的goroutine首先等待。同步是通道上发送和接收之间交互的基础。没有另一个就不可能发生。

缓冲通道：
在缓冲通道中，有能力在接收到一个或多个值之前保存它们。在这种类型通道中，不要强制goroutine在同一时刻准备好执行发送和接收。当发送或接收阻塞时也有不同的条件，只有当通道中没有要接收的值时，接收才会阻塞。仅当没有可用缓冲区来放置正在发送的值时，才会发生阻塞。

通道的发送和接收特性：
1.对于同一通道，发送操作之间是互斥的，接收操作之间也是互斥的。
2.发送操作和接收操作中对元素值的处理都是不可分割的。
3.发送操作在完全完成之前会被阻塞，接收操作也是如此。

